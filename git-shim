#!/usr/bin/env bash
# Shim some operations before passing args to git
set -Eeuo pipefail

GIT_EXEC="/home/agaia/.nix-profile/bin/git"
ORG_EXEC="$(dirname "$0")/target/debug/org"

echo "[debug] git: ${GIT_EXEC}"
echo "[debug] org: ${ORG_EXEC}"

function pre_hooks() {
  local operation="$1"
  case "${operation}" in

    # No hooks yet
    *) 
      ;;

  esac
}

function register_clonned_repo() {
  local git_args=("$@")
  # Parse the repo path we've cloned to
  # Try the last argument; It could be an explictly specified directory
  local repo_root="${git_args[-1]}"
  if [[ -d "${repo_root}" ]]; then
    "${ORG_EXEC}" --repo-root "${repo_root}" register
    return
  fi

  # Otherwise, we have to parse the repo name from the git url
  local url="${git_args[-1]}"
  repo_root="${url##*/}" # Strip everything before the last '/'
  repo_root="${repo_root%.git}" # Remove trailing '.git'
  echo "[debug] ${repo_root}"
  if [[ -d "${repo_root}" ]]; then
    "${ORG_EXEC}" --repo-root "${repo_root}" register
    return
  fi

  echo "Unable to find last clonned git dir"
  echo "Manually cd to it and run"
  echo "    ${ORG_EXEC} register"
  echo "[debug] Git command '${git_args[*]}'"
  return 1
}

function post_hooks() {
  local operation="$1"
  case "${operation}" in

    'clone')
      register_clonned_repo "$@"
      ;;

  esac
}

if [[ "$#" -eq 0 ]]; then
  echo "Must provide at least one argument"
  exit 2
fi

# Pre hooks are always ran first
# If a hook fails, our shim will stop before  the actual git command is executed
pre_hooks "${@}"

# Pass arguments to git
"${GIT_EXEC}" "${@}"

# Post hooks are only ran if the git command succeded
post_hooks "${@}"

